{"version":3,"sources":["components/StatsComponent.js","components/HeaderComponent.js","components/MapComponent.js","App.js","reportWebVitals.js","index.js"],"names":["useStyles","makeStyles","statBox","position","width","backgroundColor","padding","margin","statItem","description","fontSize","fontWeight","Stats","props","styles","stats","ipStats","StatCard","Grid","item","xs","align","className","variant","component","color","name","Box","border","borderColor","borderRadius","zIndex","container","spacing","ip","Divider","orientation","flexItem","location","timezone","isp","header","backgroundImage","process","height","input","background","paddingRight","paddingLeft","borderBottom","marginBottom","button","marginRight","Header","classes","style","Container","maxWidth","onSubmit","handleSubmit","TextField","fullWidth","placeholder","onChange","event","setUserInput","target","value","InputProps","disableUnderline","endAdornment","InputAdornment","IconButton","type","src","alt","InputLabelProps","MapComponent","coordinates","useState","centerLatLng","bounds","lat","lng","coords","setCoords","ChangeView","useMap","fitBounds","marker","L","Icon","iconUrl","useEffect","minLat","maxLat","minLng","maxLng","adjustDegree","MapContainer","center","boundsOptions","id","TileLayer","attribution","url","Marker","icon","App","userInput","loading","setLoading","error","setError","updateIpStats","preventDefault","search","searchType","test","fetch","then","response","ok","json","console","log","status","statusText","Error","data","city","region","postalCode","catch","finally","reportWebVitals","onPerfEntry","Function","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"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","file":"static/js/main.3e5d88cf.chunk.js","sourcesContent":["import React from 'react';\nimport { makeStyles } from '@material-ui/core/styles';\nimport Typography from '@material-ui/core/Typography';\nimport {Box, Grid, Divider} from '@material-ui/core';\n\nconst useStyles = makeStyles({\n    statBox: {\n        position: 'fixed',\n        width: '70vw',\n        backgroundColor: '#ffffff',\n        padding: '1.5rem',\n        margin: '-4rem 15vw 0 15vw',\n    },\n    statItem: {\n        // padding: '0 1.5rem',\n    },\n    description: {\n        fontSize: 18,\n        fontWeight: 'bold',\n    }\n  });\n\nconst Stats = (props) => {\n    const styles = useStyles();\n    const stats = props.ipStats;\n    // console.log(stats);\n\n    const StatCard = (props) => {\n        return (\n            <Grid item xs align=\"left\" className={styles.statItem}>\n                <Typography variant=\"overline\" component=\"h6\" color=\"textSecondary\">\n                    {props.name}\n                </Typography>\n                <div className={styles.description}>\n                    {props.description}\n                </div>\n            </Grid>\n        )\n    }\n\n    return (\n        <Box border={1} borderColor=\"grey.400\" borderRadius={10} zIndex=\"modal\" className={styles.statBox}>\n            <Grid container spacing={6}>\n                <StatCard name=\"IP Address\" description={stats.ip}/>\n                <Divider orientation=\"vertical\" flexItem/>\n                <StatCard name=\"Location\" description={stats.location}/>\n                <Divider orientation=\"vertical\" flexItem/>\n                <StatCard name=\"Timezone\" description={stats.timezone}/>\n                <Divider orientation=\"vertical\" flexItem/>\n                <StatCard name=\"ISP\" description={stats.isp}/>\n            </Grid>\n        </Box>\n    );\n}\n\nexport default Stats;","import React from 'react';\nimport {Container, TextField, InputAdornment, IconButton} from '@material-ui/core';\nimport { makeStyles } from '@material-ui/core/styles';\n\nconst useStyles = makeStyles({\n        header: {\n            color: 'white',\n            backgroundImage: `url(${process.env.PUBLIC_URL + '/pattern-bg.png'})`,\n            padding: '4rem',\n            height: 250,\n        },\n        input: { \n            \n            \"& .MuiFilledInput-root\": {\n                background: 'rgba(255, 255, 255, 1)',\n                paddingRight: '0',\n                paddingLeft: '1rem',\n                borderRadius: '0.7rem 0 0 0.7rem'\n            },\n            \"& .MuiFilledInput-input\": {\n                borderBottom: \"0 !important\",\n                marginBottom: \"0 !important\",\n                // borderRadius: '2% 0 0 2% !important'\n            }\n        },\n        button: {\n            padding: '1rem',\n            marginRight: '-0.7rem',\n            background: '#000000',\n            borderRadius: '0 0.7rem 0.7rem 0',\n        }\n    }\n);\n\nconst Header = (props) => {\n    const classes = useStyles();\n    const handleChange = (event) => {\n        props.setUserInput(event.target.value);\n    }\n    return (\n        <header className={classes.header}>\n            <h2 style={{\"marginTop\":0, \"fontSize\":\"20pt\"}}>IP Address Tracker</h2>\n\n            <Container maxWidth=\"sm\">\n                <form onSubmit={props.handleSubmit}>\n                    <TextField \n                        fullWidth\n                        variant=\"filled\"\n                        color=\"secondary\"\n                        placeholder=\"Search for any IP address or domain\"\n                        onChange={handleChange}\n                        InputProps={{\n                            disableUnderline: true,\n                            endAdornment: \n                                <InputAdornment position=\"end\">\n                                    <IconButton type=\"submit\" className={classes.button}>\n                                        <img src={process.env.PUBLIC_URL + \"/icon-arrow.svg\"} alt=\"search button\"/>\n                                    </IconButton>\n                                </InputAdornment>\n                            }}\n                        InputLabelProps={{\n                            disableUnderline: true,\n                        }}\n                        className={classes.input}\n                    />\n                </form>\n            </Container>\n        </header>\n    );\n}\n\nexport default Header;","import React, {useState, useEffect} from 'react';\nimport { MapContainer, TileLayer, Marker, useMap } from 'react-leaflet';\nimport L from 'leaflet';\nimport { Box } from '@material-ui/core';\n\nconst MapComponent = ({coordinates}) => {\n    const [coords, setCoords] = useState({\n        centerLatLng: [40.71427, -74.00597],\n        bounds: [\n            [40.66427, -74.05597],\n            [40.76427, -73.95597]\n        ],\n        lat: '40.71427',\n        lng: '-74.00597'\n    })\n\n    const ChangeView = ({coords}) => {\n        const map = useMap();\n        map.fitBounds(coords.bounds);\n        return null;\n    } \n\n    const marker =  new L.Icon({ iconUrl: process.env.PUBLIC_URL + '/icon-location.svg' });\n  \n    useEffect( () => {\n    // Set map bounds\n        let minLat = 180,\n            maxLat = -180;\n        let minLng = 180,\n            maxLng = -180;\n\n        let lat = coordinates[0];\n        let lng = coordinates[1];\n\n        if (lat < minLat) {\n            minLat = lat;\n        }\n        if (lat > maxLat) {\n            maxLat = lat;\n        }\n        if (lng < minLng) {\n            minLng = lng;\n        }\n        if (lng > maxLng) {\n            maxLng = lng;\n        }\n        // console.log(minLat, maxLat, minLng, maxLng)\n\n        let centerLatLng = [(minLat + maxLat) / 2, (minLng + maxLng) / 2];\n        if (minLat === maxLat || minLng === maxLng) {\n            const adjustDegree = 0.05;\n            minLat -= adjustDegree;\n            minLng -= adjustDegree;\n            maxLat += adjustDegree;\n            maxLng += adjustDegree;\n        }\n        let bounds = [\n            [minLat, minLng],\n            [maxLat, maxLng]\n        ];\n        \n        setCoords({\n            centerLatLng: centerLatLng,\n            bounds: bounds,\n            lat: lat,\n            lng: lng\n        })\n\n        // console.log(coords);\n        \n    }, [coordinates])\n\n    return (\n        <Box>\n            <MapContainer\n                // key={Date.now()}\n                center={coords.centerLatLng}\n                bounds={coords.bounds}\n                boundsOptions={{ padding: [20, 20] }}\n                id='mapid'\n            >\n                <TileLayer\n                    attribution='&amp;copy <a href=\"http://osm.org/copyright\">OpenStreetMap</a> contributors'\n                    url='https://{s}.tile.openstreetmap.org/{z}/{x}/{y}.png'\n                />\n                <Marker position={[coords.lat,coords.lng]} icon={marker} />\n                <ChangeView coords={coords}/>\n            </MapContainer>\n        </Box>\n    );\n};\n\nexport default MapComponent;\n","import React, {useState} from 'react';\nimport '@fontsource/roboto';\nimport 'leaflet/dist/leaflet.css';\nimport './App.css';\n\nimport Stats from './components/StatsComponent.js';\nimport Header from './components/HeaderComponent.js';\nimport MapComponent from './components/MapComponent.js';\n\nfunction App() {\n  const [userInput, setUserInput] = useState('');\n  const [loading, setLoading] = useState(false);\n  const [error, setError] = useState(null);\n  const [ipStats, updateIpStats] = useState(\n    {\n      ip: \"192.212.174\",\n      location: \"Brooklyn, NY 10001\",\n      coordinates: [40.650002,-73.993286],\n      timezone: \"UTC -05:00\",\n      isp: \"SpaceX Starlink\"\n    }\n  );\n\n  const fetchStats = (search) => {\n    setLoading(true);\n    setError(false);\n\n    fetch(\"https://geo.ipify.org/api/v1?apiKey=at_p0qchqpbAVlxMUkOgbHRyaKERKFCe&\" + search)\n      .then(response => {\n        // console.log(response);\n        if (response.ok) {\n          return response.json();\n        } else {\n          console.log(`Status code ${response.status}. Error: ${response.statusText}`);\n          throw Error(response.statusText);\n        }\n      })\n      .then( data => {\n        // console.log(data);\n        updateIpStats(\n          {\n            ip: data.ip,\n            location: `${data.location.city} ${data.location.region}, ${data.location.postalCode}`,\n            coordinates: [data.location.lat, data.location.lng],\n            timezone: data.location.timezone,\n            isp: data.isp\n          }\n        );\n      })\n      .catch( error => setError(error))\n      .finally(setLoading(false));\n  }\n\n  const handleSubmit = (event) => {\n    event.preventDefault();\n    // Check if input is ip address or domain\n    const ipRegex = /^\\d.*\\d$/;\n    const searchType = ipRegex.test(userInput) ? 'ipAddress' : 'domain';\n    \n    fetchStats(searchType + '=' + userInput);\n  }\n\n  return (\n    <div className=\"App\">\n      <Header handleSubmit={handleSubmit} setUserInput={setUserInput}/>\n      {\n        loading ? <p>Fetching data...</p> :\n        error ? <p>Error retrieving data.</p>\n        : <Stats ipStats={ipStats} />\n      }\n      <MapComponent coordinates={ipStats.coordinates}/>\n    </div>\n  );\n}\n\nexport default App;\n","const reportWebVitals = onPerfEntry => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}